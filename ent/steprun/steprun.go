// Code generated by entc, DO NOT EDIT.

package steprun

import (
	"fmt"
)

const (
	// Label holds the string label denoting the steprun type in the database.
	Label = "step_run"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldReason holds the string denoting the reason field in the database.
	FieldReason = "reason"
	// EdgeAccount holds the string denoting the account edge name in mutations.
	EdgeAccount = "account"
	// EdgeNode holds the string denoting the node edge name in mutations.
	EdgeNode = "node"
	// Table holds the table name of the steprun in the database.
	Table = "step_runs"
	// AccountTable is the table that holds the account relation/edge.
	AccountTable = "step_runs"
	// AccountInverseTable is the table name for the Account entity.
	// It exists in this package in order to avoid circular dependency with the "account" package.
	AccountInverseTable = "accounts"
	// AccountColumn is the table column denoting the account relation/edge.
	AccountColumn = "account_step_runs"
	// NodeTable is the table that holds the node relation/edge.
	NodeTable = "step_runs"
	// NodeInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	NodeInverseTable = "nodes"
	// NodeColumn is the table column denoting the node relation/edge.
	NodeColumn = "node_step_runs"
)

// Columns holds all SQL columns for steprun fields.
var Columns = []string{
	FieldID,
	FieldStep,
	FieldStatus,
	FieldReason,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "step_runs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"account_step_runs",
	"node_step_runs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending Status = "pending"
	StatusRunning Status = "running"
	StatusSuccess Status = "success"
	StatusFailed  Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusSuccess, StatusFailed:
		return nil
	default:
		return fmt.Errorf("steprun: invalid enum value for status field: %q", s)
	}
}
