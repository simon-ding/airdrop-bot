// Code generated by ent, DO NOT EDIT.

package node

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldDnsName holds the string denoting the dnsname field in the database.
	FieldDnsName = "dns_name"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeStepRuns holds the string denoting the step_runs edge name in mutations.
	EdgeStepRuns = "step_runs"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// StepRunsTable is the table that holds the step_runs relation/edge.
	StepRunsTable = "step_runs"
	// StepRunsInverseTable is the table name for the StepRun entity.
	// It exists in this package in order to avoid circular dependency with the "steprun" package.
	StepRunsInverseTable = "step_runs"
	// StepRunsColumn is the table column denoting the step_runs relation/edge.
	StepRunsColumn = "node_step_runs"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRegion,
	FieldDnsName,
	FieldAddress,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByDnsName orders the results by the dnsName field.
func ByDnsName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDnsName, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByStepRunsCount orders the results by step_runs count.
func ByStepRunsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newStepRunsStep(), opts...)
	}
}

// ByStepRuns orders the results by step_runs terms.
func ByStepRuns(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStepRunsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newStepRunsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StepRunsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, StepRunsTable, StepRunsColumn),
	)
}
