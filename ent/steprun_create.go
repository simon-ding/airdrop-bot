// Code generated by ent, DO NOT EDIT.

package ent

import (
	"airdrop-bot/ent/account"
	"airdrop-bot/ent/node"
	"airdrop-bot/ent/steprun"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StepRunCreate is the builder for creating a StepRun entity.
type StepRunCreate struct {
	config
	mutation *StepRunMutation
	hooks    []Hook
}

// SetStep sets the "step" field.
func (src *StepRunCreate) SetStep(s string) *StepRunCreate {
	src.mutation.SetStep(s)
	return src
}

// SetStatus sets the "status" field.
func (src *StepRunCreate) SetStatus(s steprun.Status) *StepRunCreate {
	src.mutation.SetStatus(s)
	return src
}

// SetReason sets the "reason" field.
func (src *StepRunCreate) SetReason(s string) *StepRunCreate {
	src.mutation.SetReason(s)
	return src
}

// SetAccountID sets the "account" edge to the Account entity by ID.
func (src *StepRunCreate) SetAccountID(id int) *StepRunCreate {
	src.mutation.SetAccountID(id)
	return src
}

// SetNillableAccountID sets the "account" edge to the Account entity by ID if the given value is not nil.
func (src *StepRunCreate) SetNillableAccountID(id *int) *StepRunCreate {
	if id != nil {
		src = src.SetAccountID(*id)
	}
	return src
}

// SetAccount sets the "account" edge to the Account entity.
func (src *StepRunCreate) SetAccount(a *Account) *StepRunCreate {
	return src.SetAccountID(a.ID)
}

// SetNodeID sets the "node" edge to the Node entity by ID.
func (src *StepRunCreate) SetNodeID(id int) *StepRunCreate {
	src.mutation.SetNodeID(id)
	return src
}

// SetNillableNodeID sets the "node" edge to the Node entity by ID if the given value is not nil.
func (src *StepRunCreate) SetNillableNodeID(id *int) *StepRunCreate {
	if id != nil {
		src = src.SetNodeID(*id)
	}
	return src
}

// SetNode sets the "node" edge to the Node entity.
func (src *StepRunCreate) SetNode(n *Node) *StepRunCreate {
	return src.SetNodeID(n.ID)
}

// Mutation returns the StepRunMutation object of the builder.
func (src *StepRunCreate) Mutation() *StepRunMutation {
	return src.mutation
}

// Save creates the StepRun in the database.
func (src *StepRunCreate) Save(ctx context.Context) (*StepRun, error) {
	return withHooks[*StepRun, StepRunMutation](ctx, src.sqlSave, src.mutation, src.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (src *StepRunCreate) SaveX(ctx context.Context) *StepRun {
	v, err := src.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (src *StepRunCreate) Exec(ctx context.Context) error {
	_, err := src.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (src *StepRunCreate) ExecX(ctx context.Context) {
	if err := src.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (src *StepRunCreate) check() error {
	if _, ok := src.mutation.Step(); !ok {
		return &ValidationError{Name: "step", err: errors.New(`ent: missing required field "StepRun.step"`)}
	}
	if _, ok := src.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "StepRun.status"`)}
	}
	if v, ok := src.mutation.Status(); ok {
		if err := steprun.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "StepRun.status": %w`, err)}
		}
	}
	if _, ok := src.mutation.Reason(); !ok {
		return &ValidationError{Name: "reason", err: errors.New(`ent: missing required field "StepRun.reason"`)}
	}
	return nil
}

func (src *StepRunCreate) sqlSave(ctx context.Context) (*StepRun, error) {
	if err := src.check(); err != nil {
		return nil, err
	}
	_node, _spec := src.createSpec()
	if err := sqlgraph.CreateNode(ctx, src.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	src.mutation.id = &_node.ID
	src.mutation.done = true
	return _node, nil
}

func (src *StepRunCreate) createSpec() (*StepRun, *sqlgraph.CreateSpec) {
	var (
		_node = &StepRun{config: src.config}
		_spec = sqlgraph.NewCreateSpec(steprun.Table, sqlgraph.NewFieldSpec(steprun.FieldID, field.TypeInt))
	)
	if value, ok := src.mutation.Step(); ok {
		_spec.SetField(steprun.FieldStep, field.TypeString, value)
		_node.Step = value
	}
	if value, ok := src.mutation.Status(); ok {
		_spec.SetField(steprun.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := src.mutation.Reason(); ok {
		_spec.SetField(steprun.FieldReason, field.TypeString, value)
		_node.Reason = value
	}
	if nodes := src.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   steprun.AccountTable,
			Columns: []string{steprun.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(account.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.account_step_runs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := src.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   steprun.NodeTable,
			Columns: []string{steprun.NodeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_step_runs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StepRunCreateBulk is the builder for creating many StepRun entities in bulk.
type StepRunCreateBulk struct {
	config
	builders []*StepRunCreate
}

// Save creates the StepRun entities in the database.
func (srcb *StepRunCreateBulk) Save(ctx context.Context) ([]*StepRun, error) {
	specs := make([]*sqlgraph.CreateSpec, len(srcb.builders))
	nodes := make([]*StepRun, len(srcb.builders))
	mutators := make([]Mutator, len(srcb.builders))
	for i := range srcb.builders {
		func(i int, root context.Context) {
			builder := srcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StepRunMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, srcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, srcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, srcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (srcb *StepRunCreateBulk) SaveX(ctx context.Context) []*StepRun {
	v, err := srcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (srcb *StepRunCreateBulk) Exec(ctx context.Context) error {
	_, err := srcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (srcb *StepRunCreateBulk) ExecX(ctx context.Context) {
	if err := srcb.Exec(ctx); err != nil {
		panic(err)
	}
}
