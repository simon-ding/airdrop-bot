// Code generated by entc, DO NOT EDIT.

package ent

import (
	"airdrop-bot/ent/account"
	"airdrop-bot/ent/node"
	"airdrop-bot/ent/steprun"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// StepRun is the model entity for the StepRun schema.
type StepRun struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Step holds the value of the "step" field.
	Step string `json:"step,omitempty"`
	// Status holds the value of the "status" field.
	Status steprun.Status `json:"status,omitempty"`
	// Reason holds the value of the "reason" field.
	Reason string `json:"reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the StepRunQuery when eager-loading is set.
	Edges             StepRunEdges `json:"edges"`
	account_step_runs *int
	node_step_runs    *int
}

// StepRunEdges holds the relations/edges for other nodes in the graph.
type StepRunEdges struct {
	// Account holds the value of the account edge.
	Account *Account `json:"account,omitempty"`
	// Node holds the value of the node edge.
	Node *Node `json:"node,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AccountOrErr returns the Account value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepRunEdges) AccountOrErr() (*Account, error) {
	if e.loadedTypes[0] {
		if e.Account == nil {
			// The edge account was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: account.Label}
		}
		return e.Account, nil
	}
	return nil, &NotLoadedError{edge: "account"}
}

// NodeOrErr returns the Node value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e StepRunEdges) NodeOrErr() (*Node, error) {
	if e.loadedTypes[1] {
		if e.Node == nil {
			// The edge node was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: node.Label}
		}
		return e.Node, nil
	}
	return nil, &NotLoadedError{edge: "node"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*StepRun) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case steprun.FieldID:
			values[i] = new(sql.NullInt64)
		case steprun.FieldStep, steprun.FieldStatus, steprun.FieldReason:
			values[i] = new(sql.NullString)
		case steprun.ForeignKeys[0]: // account_step_runs
			values[i] = new(sql.NullInt64)
		case steprun.ForeignKeys[1]: // node_step_runs
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type StepRun", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the StepRun fields.
func (sr *StepRun) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case steprun.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sr.ID = int(value.Int64)
		case steprun.FieldStep:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				sr.Step = value.String
			}
		case steprun.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sr.Status = steprun.Status(value.String)
			}
		case steprun.FieldReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reason", values[i])
			} else if value.Valid {
				sr.Reason = value.String
			}
		case steprun.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field account_step_runs", value)
			} else if value.Valid {
				sr.account_step_runs = new(int)
				*sr.account_step_runs = int(value.Int64)
			}
		case steprun.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field node_step_runs", value)
			} else if value.Valid {
				sr.node_step_runs = new(int)
				*sr.node_step_runs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAccount queries the "account" edge of the StepRun entity.
func (sr *StepRun) QueryAccount() *AccountQuery {
	return (&StepRunClient{config: sr.config}).QueryAccount(sr)
}

// QueryNode queries the "node" edge of the StepRun entity.
func (sr *StepRun) QueryNode() *NodeQuery {
	return (&StepRunClient{config: sr.config}).QueryNode(sr)
}

// Update returns a builder for updating this StepRun.
// Note that you need to call StepRun.Unwrap() before calling this method if this StepRun
// was returned from a transaction, and the transaction was committed or rolled back.
func (sr *StepRun) Update() *StepRunUpdateOne {
	return (&StepRunClient{config: sr.config}).UpdateOne(sr)
}

// Unwrap unwraps the StepRun entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sr *StepRun) Unwrap() *StepRun {
	tx, ok := sr.config.driver.(*txDriver)
	if !ok {
		panic("ent: StepRun is not a transactional entity")
	}
	sr.config.driver = tx.drv
	return sr
}

// String implements the fmt.Stringer.
func (sr *StepRun) String() string {
	var builder strings.Builder
	builder.WriteString("StepRun(")
	builder.WriteString(fmt.Sprintf("id=%v", sr.ID))
	builder.WriteString(", step=")
	builder.WriteString(sr.Step)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", sr.Status))
	builder.WriteString(", reason=")
	builder.WriteString(sr.Reason)
	builder.WriteByte(')')
	return builder.String()
}

// StepRuns is a parsable slice of StepRun.
type StepRuns []*StepRun

func (sr StepRuns) config(cfg config) {
	for _i := range sr {
		sr[_i].config = cfg
	}
}
